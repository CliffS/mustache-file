// Generated by CoffeeScript 1.10.0

/*
 * mustache-file.js - wrapper around mustache
 *
 * For fully documented souce code, please see the coffeescript
 * source on gGithub.
 *
 */

(function() {
  var Async, Mustache, Path, fs, mustache, partialRE;

  fs = require('fs');

  mustache = require('mustache');

  Path = require('path');

  Async = require('async');

  partialRE = /{{>\s*([\w-]+)\s*}}/g;

  Mustache = (function() {
    function Mustache(options) {
      var ref, ref1;
      this.extension = (ref = options.extension) != null ? ref : 'mustache';
      this.path = (ref1 = options.path) != null ? ref1 : '.';
    }

    Mustache.prototype.parts = {};

    Mustache.prototype.readFile = function(filename, callback) {
      var findFirst, fullPath, paths;
      paths = Array.isArray(this.path) ? this.path.slice(0) : [this.path];
      fullPath = void 0;
      findFirst = (function(_this) {
        return function(callback) {
          var file, path;
          path = paths.shift();
          if (path == null) {
            return callback(new Error("File not found: " + filename));
          }
          file = Path.join(path, filename + "." + _this.extension);
          return fs.access(file, fs.R_OK, function(err) {
            if (!err) {
              fullPath = file;
            }
            return callback(void 0);
          });
        };
      })(this);
      return Async.doUntil(findFirst, function() {
        return fullPath != null;
      }, (function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return fs.readFile(fullPath, {
            encoding: 'utf-8'
          }, function(err, data) {
            var partials;
            if (err) {
              return callback(err);
            }
            partials = data.match(partialRE);
            if (partials == null) {
              partials = [];
            }
            return Async.each(partials, function(partial, cb) {
              partial = partial.replace(partialRE, '$1');
              return _this.readFile(partial, function(err, part) {
                if (err) {
                  return cb(err);
                }
                _this.parts[partial] = part;
                return cb(void 0);
              });
            }, function(err) {
              return callback(err, data);
            });
          });
        };
      })(this));
    };

    Mustache.prototype.render = function(file, context, callback) {
      this.parts = {};
      return this.readFile(file, (function(_this) {
        return function(err, template) {
          var error, result;
          if (err) {
            return callback(err);
          }
          try {
            result = mustache.render(template, context, _this.parts);
          } catch (error) {
            err = error;
            return callback(err);
          }
          return callback(void 0, result);
        };
      })(this));
    };

    return Mustache;

  })();

  module.exports = Mustache;

}).call(this);
